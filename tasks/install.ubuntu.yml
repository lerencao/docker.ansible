---
- name: Check OS version
  fail: "docker role only support Ubuntu 14.04"
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int == 14


### Install.

- name: Ensure that APT works with the https method, and that CA certificates are installed
  package: name={{ item }} state=present
  with_items:
    - apt-transport-https
    - ca-certificates

# if http proxy needed, add the following.
# {% if http_proxy is defined -%}--keyserver-options http-proxy={{ http_proxy }} {% endif -%}
- name: Install GPG key
  command: apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80  --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

- name: Configure apt repository
  template: src="docker.list.j2" dest="/etc/apt/sources.list.d/docker.list"
  register: add_apt_source_docker
- name: Update repository information
  command: apt-get update
  when: add_apt_source_docker.changed

- name: Purge old docker if it exists
  package:
    name: lxc-docker
    state: absent

- name: Ensure linux-image-extra-* kernel packages installed
  package:
    name: "{{ item }}"
    state: present
  items:
    - "linux-image-extra-{{ ansible_kernel }}"
    - linux-image-extra-virtual

- name: Ensure docker engine installed
  package:
    name: docker-engine
    state: present

- name: Ensure docker started and will start on boot
  service:
    name: docker
    enabled: yes
    state: started


### configuration on docker net config.

- name: Set local vars for configuration
  set_fact:
    docker_config_dir: "/etc/default"
    docker_config_net_file: "{{ docker_config_dir }}/docker"

- name: verify docker config file exists
  file:
    path: "{{ docker_config_net_file }}"
    state: touch
  changed_when: false

- name: Turn down docker logging
  lineinfile:
    dest: "{{ docker_config_net_file }}"
    regexp: ^OPTIONS=
    line: OPTIONS="--selinux-enabled --log-level=warn"
  notify:
    - restart docker

- name: Install no-proxy into docker
  lineinfile:
    dest: {{ docker_config_net_file }}
    regexp: ^export no_proxy=
    line: export no_proxy={{ no_proxy }}
  notify:
    - restart docker
